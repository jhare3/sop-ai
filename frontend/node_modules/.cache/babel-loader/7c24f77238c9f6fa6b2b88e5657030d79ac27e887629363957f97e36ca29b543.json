{"ast":null,"code":"var _jsxFileName = \"/Users/jameshare/codingProjects/sop-ai/sop-ai/src/App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\nimport sopData from './sops.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const apiKey = \"AIzaSyBPk4NYw_5enfX5-OJxYN14haaxFoQxiPM\"; // <-- your API key here\n  const messagesEndRef = useRef(null);\n  const [dynamicSops, setDynamicSops] = useState([]);\n  useEffect(() => {\n    setMessages([{\n      text: \"Hello! I'm THE SOP AI. How can I help you today with store procedures?\",\n      sender: 'ai'\n    }]);\n  }, []);\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]);\n  useEffect(() => {\n    const fetchSOPData = async () => {\n      try {\n        const filenames = [\"Merchandise%20Holds.pdf\", \"RInging%20Sequence%2011.28.pdf\", \"SOP%20-%20Product%20Recall.pdf\", \"SOP%20-%20Returns.pdf\"];\n        const fetchedSops = await Promise.all(filenames.map(async file => {\n          const response = await fetch(`http://localhost:5000/api/sop/${file}`);\n          const data = await response.json();\n          return {\n            title: file.replace(/%20/g, ' ').replace(\".pdf\", \"\"),\n            content: extractTextFromPdf2Json(data),\n            category: \"POS & Front End\"\n          };\n        }));\n        setDynamicSops(fetchedSops);\n      } catch (err) {\n        console.error(\"Failed to fetch SOPs:\", err);\n      }\n    };\n    fetchSOPData();\n  }, []);\n  const createContext = () => {\n    let context = \"You are THE SOP AI, an expert assistant trained on the company's Standard Operating Procedures.\\n\\n\";\n    sopData.sops.forEach(sop => {\n      context += `CATEGORY: ${sop.category}\\n`;\n      context += `TITLE: ${sop.title}\\n`;\n      context += `CONTENT:\\n${sop.content.join(\"\\n\")}\\n\\n`;\n    });\n    return context;\n  };\n  const sendToGemini = async userQuestion => {\n    try {\n      const response = await fetch(\"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=\" + apiKey, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          contents: [{\n            parts: [{\n              text: createContext() + `Question: ${userQuestion}\\nDo NOT use markdown format! Responnd from the point of view of a super chill district manager. Only respond in plain text with NO formatting. Answer:`\n            }]\n          }]\n        })\n      });\n      const data = await response.json();\n      if (data.error) {\n        throw new Error(data.error.message || \"Error with Gemini API\");\n      }\n      return data.candidates[0].content.parts[0].text;\n    } catch (error) {\n      console.error('Error with Gemini API:', error);\n      return \"Sorry, I encountered an error while processing your request. Please try again later.\";\n    }\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!input.trim()) return;\n    const userMessage = {\n      text: input,\n      sender: 'user'\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setInput('');\n    setIsLoading(true);\n    const aiResponse = await sendToGemini(input);\n    const aiMessage = {\n      text: aiResponse,\n      sender: 'ai'\n    };\n    setMessages(prev => [...prev, aiMessage]);\n    setIsLoading(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"chat-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"THE SOP AI\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Your retail assistant for Standard Operating Procedures\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages-area\",\n        children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${message.sender}`,\n          children: message.text\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 13\n        }, this)), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message ai loading\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"typing-indicator\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        className: \"input-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: input,\n          onChange: e => setInput(e.target.value),\n          placeholder: \"Ask about store procedures...\",\n          disabled: isLoading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          disabled: isLoading || !input.trim(),\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"7wt+N3a0WitFISp6/4dgV1tfapE=\");\n_c = App;\nconst extractTextFromPdf2Json = pdfData => {\n  var _pdfData$formImage, _pdfData$formImage$Pa;\n  let text = \"\";\n  pdfData === null || pdfData === void 0 ? void 0 : (_pdfData$formImage = pdfData.formImage) === null || _pdfData$formImage === void 0 ? void 0 : (_pdfData$formImage$Pa = _pdfData$formImage.Pages) === null || _pdfData$formImage$Pa === void 0 ? void 0 : _pdfData$formImage$Pa.forEach(page => {\n    var _page$Texts;\n    (_page$Texts = page.Texts) === null || _page$Texts === void 0 ? void 0 : _page$Texts.forEach(item => {\n      const decoded = decodeURIComponent(item.R[0].T);\n      text += decoded + \" \";\n    });\n  });\n  return text.trim().split(/\\n{2,}/); // break into chunks\n};\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","sopData","jsxDEV","_jsxDEV","App","_s","messages","setMessages","input","setInput","isLoading","setIsLoading","apiKey","messagesEndRef","dynamicSops","setDynamicSops","text","sender","_messagesEndRef$curre","current","scrollIntoView","behavior","fetchSOPData","filenames","fetchedSops","Promise","all","map","file","response","fetch","data","json","title","replace","content","extractTextFromPdf2Json","category","err","console","error","createContext","context","sops","forEach","sop","join","sendToGemini","userQuestion","method","headers","body","JSON","stringify","contents","parts","Error","message","candidates","handleSubmit","e","preventDefault","trim","userMessage","prev","aiResponse","aiMessage","className","children","fileName","_jsxFileName","lineNumber","columnNumber","index","ref","onSubmit","type","value","onChange","target","placeholder","disabled","_c","pdfData","_pdfData$formImage","_pdfData$formImage$Pa","formImage","Pages","page","_page$Texts","Texts","item","decoded","decodeURIComponent","R","T","split","$RefreshReg$"],"sources":["/Users/jameshare/codingProjects/sop-ai/sop-ai/src/App.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\nimport sopData from './sops.json';\n\nfunction App() {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const apiKey = \"AIzaSyBPk4NYw_5enfX5-OJxYN14haaxFoQxiPM\"; // <-- your API key here\n  const messagesEndRef = useRef(null);\n  const [dynamicSops, setDynamicSops] = useState([]);\n\n\n  useEffect(() => {\n    setMessages([{\n      text: \"Hello! I'm THE SOP AI. How can I help you today with store procedures?\",\n      sender: 'ai'\n    }]);\n  }, []);\n\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages]);\n\n  useEffect(() => {\n    const fetchSOPData = async () => {\n      try {\n        const filenames = [\n          \"Merchandise%20Holds.pdf\",\n          \"RInging%20Sequence%2011.28.pdf\",\n          \"SOP%20-%20Product%20Recall.pdf\",\n          \"SOP%20-%20Returns.pdf\"\n        ];\n  \n        const fetchedSops = await Promise.all(\n          filenames.map(async (file) => {\n            const response = await fetch(`http://localhost:5000/api/sop/${file}`);\n            const data = await response.json();\n            return {\n              title: file.replace(/%20/g, ' ').replace(\".pdf\", \"\"),\n              content: extractTextFromPdf2Json(data),\n              category: \"POS & Front End\"\n            };\n          })\n        );\n  \n        setDynamicSops(fetchedSops);\n      } catch (err) {\n        console.error(\"Failed to fetch SOPs:\", err);\n      }\n    };\n  \n    fetchSOPData();\n  }, []);\n  \n  const createContext = () => {\n    let context = \"You are THE SOP AI, an expert assistant trained on the company's Standard Operating Procedures.\\n\\n\";\n    \n    sopData.sops.forEach(sop => {\n      context += `CATEGORY: ${sop.category}\\n`;\n      context += `TITLE: ${sop.title}\\n`;\n      context += `CONTENT:\\n${sop.content.join(\"\\n\")}\\n\\n`;\n    });\n    \n    return context;\n  };\n  \n\n  const sendToGemini = async (userQuestion) => {\n    try {\n      const response = await fetch(\"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=\" + apiKey, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          contents: [\n            {\n              parts: [\n                {\n                  text: createContext() + `Question: ${userQuestion}\\nDo NOT use markdown format! Responnd from the point of view of a super chill district manager. Only respond in plain text with NO formatting. Answer:`\n                }\n              ]\n            }\n          ]\n        })\n      });\n\n      const data = await response.json();\n\n      if (data.error) {\n        throw new Error(data.error.message || \"Error with Gemini API\");\n      }\n\n      return data.candidates[0].content.parts[0].text;\n    } catch (error) {\n      console.error('Error with Gemini API:', error);\n      return \"Sorry, I encountered an error while processing your request. Please try again later.\";\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (!input.trim()) return;\n\n    const userMessage = { text: input, sender: 'user' };\n    setMessages(prev => [...prev, userMessage]);\n    setInput('');\n    setIsLoading(true);\n\n    const aiResponse = await sendToGemini(input);\n    const aiMessage = { text: aiResponse, sender: 'ai' };\n    setMessages(prev => [...prev, aiMessage]);\n    setIsLoading(false);\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"chat-container\">\n        <header className=\"chat-header\">\n          <h1>THE SOP AI</h1>\n          <p>Your retail assistant for Standard Operating Procedures</p>\n        </header>\n\n        <div className=\"messages-area\">\n          {messages.map((message, index) => (\n            <div key={index} className={`message ${message.sender}`}>\n              {message.text}\n            </div>\n          ))}\n          {isLoading && (\n            <div className=\"message ai loading\">\n              <div className=\"typing-indicator\">\n                <span></span>\n                <span></span>\n                <span></span>\n              </div>\n            </div>\n          )}\n          <div ref={messagesEndRef} />\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"input-form\">\n          <input\n            type=\"text\"\n            value={input}\n            onChange={(e) => setInput(e.target.value)}\n            placeholder=\"Ask about store procedures...\"\n            disabled={isLoading}\n          />\n          <button type=\"submit\" disabled={isLoading || !input.trim()}>\n            Send\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nconst extractTextFromPdf2Json = (pdfData) => {\n  let text = \"\";\n  pdfData?.formImage?.Pages?.forEach(page => {\n    page.Texts?.forEach(item => {\n      const decoded = decodeURIComponent(item.R[0].T);\n      text += decoded + \" \";\n    });\n  });\n  return text.trim().split(/\\n{2,}/); // break into chunks\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}