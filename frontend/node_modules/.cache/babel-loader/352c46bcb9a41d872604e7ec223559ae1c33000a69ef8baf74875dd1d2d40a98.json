{"ast":null,"code":"var _jsxFileName = \"/Users/jameshare/codingProjects/sop-ai/sop-ai/frontend/src/App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './App.css'; // If you have any CSS for your app\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const messagesEndRef = useRef(null);\n  const apiKey = \"AIzaSyBPk4NYw_5enfX5-OJxYN14haaxFoQxiPM\"; // Replace with your actual key\n\n  useEffect(() => {\n    setMessages([{\n      text: \"Hello! I'm THE SOP AI. How can I help you today with store procedures?\",\n      sender: 'ai'\n    }]);\n  }, []);\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]);\n  const sendToGemini = async userQuestion => {\n    try {\n      const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          contents: [{\n            parts: [{\n              text: `Question: ${userQuestion}\\nAnswer:`\n            }]\n          }]\n        })\n      });\n      const data = await response.json();\n      if (data.error) throw new Error(data.error.message || \"Error with Gemini API\");\n      return data.candidates[0].content.parts[0].text;\n    } catch (error) {\n      console.error('Error with Gemini API:', error);\n      return \"Sorry, I encountered an error while processing your request.\";\n    }\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!input.trim()) return;\n    const userMessage = {\n      text: input,\n      sender: 'user'\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setInput('');\n    setIsLoading(true);\n    const aiResponse = await sendToGemini(input);\n    const aiMessage = {\n      text: aiResponse,\n      sender: 'ai'\n    };\n    setMessages(prev => [...prev, aiMessage]);\n    setIsLoading(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"chat-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"THE SOP AI\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Your retail assistant for Standard Operating Procedures\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages-area\",\n        children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${message.sender}`,\n          children: message.text\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this)), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message ai loading\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"typing-indicator\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 30\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 43\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        className: \"input-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: input,\n          onChange: e => setInput(e.target.value),\n          placeholder: \"Ask about store procedures...\",\n          disabled: isLoading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          disabled: isLoading || !input.trim(),\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"UCxWPYHyCNzrbO5Y7ohHD7Lz13g=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","App","_s","messages","setMessages","input","setInput","isLoading","setIsLoading","messagesEndRef","apiKey","text","sender","_messagesEndRef$curre","current","scrollIntoView","behavior","sendToGemini","userQuestion","response","fetch","method","headers","body","JSON","stringify","contents","parts","data","json","error","Error","message","candidates","content","console","handleSubmit","e","preventDefault","trim","userMessage","prev","aiResponse","aiMessage","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","ref","onSubmit","type","value","onChange","target","placeholder","disabled","_c","$RefreshReg$"],"sources":["/Users/jameshare/codingProjects/sop-ai/sop-ai/frontend/src/App.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './App.css'; // If you have any CSS for your app\n\nfunction App() {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const messagesEndRef = useRef(null);\n\n  const apiKey = \"AIzaSyBPk4NYw_5enfX5-OJxYN14haaxFoQxiPM\"; // Replace with your actual key\n\n  useEffect(() => {\n    setMessages([{\n      text: \"Hello! I'm THE SOP AI. How can I help you today with store procedures?\",\n      sender: 'ai'\n    }]);\n  }, []);\n\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages]);\n\n  const sendToGemini = async (userQuestion) => {\n    try {\n      const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          contents: [{\n            parts: [{\n              text: `Question: ${userQuestion}\\nAnswer:`\n            }]\n          }]\n        })\n      });\n\n      const data = await response.json();\n\n      if (data.error) throw new Error(data.error.message || \"Error with Gemini API\");\n\n      return data.candidates[0].content.parts[0].text;\n    } catch (error) {\n      console.error('Error with Gemini API:', error);\n      return \"Sorry, I encountered an error while processing your request.\";\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (!input.trim()) return;\n\n    const userMessage = { text: input, sender: 'user' };\n    setMessages(prev => [...prev, userMessage]);\n    setInput('');\n    setIsLoading(true);\n\n    const aiResponse = await sendToGemini(input);\n    const aiMessage = { text: aiResponse, sender: 'ai' };\n    setMessages(prev => [...prev, aiMessage]);\n    setIsLoading(false);\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"chat-container\">\n        <header className=\"chat-header\">\n          <h1>THE SOP AI</h1>\n          <p>Your retail assistant for Standard Operating Procedures</p>\n        </header>\n\n        <div className=\"messages-area\">\n          {messages.map((message, index) => (\n            <div key={index} className={`message ${message.sender}`}>\n              {message.text}\n            </div>\n          ))}\n          {isLoading && (\n            <div className=\"message ai loading\">\n              <div className=\"typing-indicator\">\n                <span></span><span></span><span></span>\n              </div>\n            </div>\n          )}\n          <div ref={messagesEndRef} />\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"input-form\">\n          <input\n            type=\"text\"\n            value={input}\n            onChange={(e) => setInput(e.target.value)}\n            placeholder=\"Ask about store procedures...\"\n            disabled={isLoading}\n          />\n          <button type=\"submit\" disabled={isLoading || !input.trim()}>Send</button>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}