{"ast":null,"code":"var _jsxFileName = \"/Users/jameshare/codingProjects/sop-ai/sop-ai/src/App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [dynamicSops, setDynamicSops] = useState([]);\n  const messagesEndRef = useRef(null);\n  const apiKey = \"AIzaSyBPk4NYw_5enfX5-OJxYN14haaxFoQxiPM\"; // Replace with your actual key\n\n  useEffect(() => {\n    setMessages([{\n      text: \"Hello! I'm THE SOP AI. How can I help you today with store procedures?\",\n      sender: 'ai'\n    }]);\n    const fetchSOPData = async () => {\n      try {\n        const filenames = [\"Merchandise%20Holds.pdf\", \"Ringing%20Sequence%2011.28.pdf\", \"SOP%20-%20Product%20Recall.pdf\", \"SOP%20-%20Returns.pdf\"];\n        const fetchedSops = await Promise.all(filenames.map(async file => {\n          const response = await fetch(`http://localhost:5000/api/sop/${file}`);\n          const data = await response.json();\n          return {\n            title: decodeURIComponent(file.replace(\".pdf\", \"\")),\n            content: extractTextFromPdf2Json(data),\n            category: \"POS & Front End\"\n          };\n        }));\n        setDynamicSops(fetchedSops);\n      } catch (err) {\n        console.error(\"Failed to fetch SOPs:\", err);\n      }\n    };\n    fetchSOPData();\n  }, []);\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]);\n  const extractTextFromPdf2Json = pdfData => {\n    var _pdfData$formImage, _pdfData$formImage$Pa;\n    let text = \"\";\n    pdfData === null || pdfData === void 0 ? void 0 : (_pdfData$formImage = pdfData.formImage) === null || _pdfData$formImage === void 0 ? void 0 : (_pdfData$formImage$Pa = _pdfData$formImage.Pages) === null || _pdfData$formImage$Pa === void 0 ? void 0 : _pdfData$formImage$Pa.forEach(page => {\n      var _page$Texts;\n      (_page$Texts = page.Texts) === null || _page$Texts === void 0 ? void 0 : _page$Texts.forEach(item => {\n        const decoded = decodeURIComponent(item.R[0].T);\n        text += decoded + \" \";\n      });\n    });\n    return text.trim().split(/\\n{2,}/); // break into chunks\n  };\n  const createContext = () => {\n    let context = \"You are THE SOP AI, an expert assistant trained on the company's Standard Operating Procedures.\\n\\n\";\n    dynamicSops.forEach(sop => {\n      context += `CATEGORY: ${sop.category}\\n`;\n      context += `TITLE: ${sop.title}\\n`;\n      context += `CONTENT:\\n${sop.content.join(\"\\n\")}\\n\\n`;\n    });\n    return context;\n  };\n  const sendToGemini = async userQuestion => {\n    try {\n      const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          contents: [{\n            parts: [{\n              text: createContext() + `Question: ${userQuestion}\\nDo NOT use markdown format! Respond like a profession robotic district manager. You will always reference the SOP documentation to backup your resluts. If you do not have the answer the user is asking for, DO NOT HALUCINATE. Instead admit you do not have the information requested. Only use plain text. Answer:`\n            }]\n          }]\n        })\n      });\n      const data = await response.json();\n      if (data.error) throw new Error(data.error.message || \"Error with Gemini API\");\n      return data.candidates[0].content.parts[0].text;\n    } catch (error) {\n      console.error('Error with Gemini API:', error);\n      return \"Sorry, I encountered an error while processing your request.\";\n    }\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!input.trim()) return;\n    const userMessage = {\n      text: input,\n      sender: 'user'\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setInput('');\n    setIsLoading(true);\n    const aiResponse = await sendToGemini(input);\n    const aiMessage = {\n      text: aiResponse,\n      sender: 'ai'\n    };\n    setMessages(prev => [...prev, aiMessage]);\n    setIsLoading(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"chat-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"THE SOP AI\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Your retail assistant for Standard Operating Procedures\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages-area\",\n        children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${message.sender}`,\n          children: message.text\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 13\n        }, this)), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message ai loading\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"typing-indicator\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 30\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 43\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        className: \"input-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: input,\n          onChange: e => setInput(e.target.value),\n          placeholder: \"Ask about store procedures...\",\n          disabled: isLoading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          disabled: isLoading || !input.trim(),\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"y9Gj5WehevqeUFHFENokON5R8NE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","App","_s","messages","setMessages","input","setInput","isLoading","setIsLoading","dynamicSops","setDynamicSops","messagesEndRef","apiKey","text","sender","fetchSOPData","filenames","fetchedSops","Promise","all","map","file","response","fetch","data","json","title","decodeURIComponent","replace","content","extractTextFromPdf2Json","category","err","console","error","_messagesEndRef$curre","current","scrollIntoView","behavior","pdfData","_pdfData$formImage","_pdfData$formImage$Pa","formImage","Pages","forEach","page","_page$Texts","Texts","item","decoded","R","T","trim","split","createContext","context","sop","join","sendToGemini","userQuestion","method","headers","body","JSON","stringify","contents","parts","Error","message","candidates","handleSubmit","e","preventDefault","userMessage","prev","aiResponse","aiMessage","className","children","fileName","_jsxFileName","lineNumber","columnNumber","index","ref","onSubmit","type","value","onChange","target","placeholder","disabled","_c","$RefreshReg$"],"sources":["/Users/jameshare/codingProjects/sop-ai/sop-ai/src/App.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [dynamicSops, setDynamicSops] = useState([]);\n  const messagesEndRef = useRef(null);\n\n  const apiKey = \"AIzaSyBPk4NYw_5enfX5-OJxYN14haaxFoQxiPM\"; // Replace with your actual key\n\n  useEffect(() => {\n    setMessages([{\n      text: \"Hello! I'm THE SOP AI. How can I help you today with store procedures?\",\n      sender: 'ai'\n    }]);\n\n    const fetchSOPData = async () => {\n      try {\n        const filenames = [\n          \"Merchandise%20Holds.pdf\",\n          \"Ringing%20Sequence%2011.28.pdf\",\n          \"SOP%20-%20Product%20Recall.pdf\",\n          \"SOP%20-%20Returns.pdf\"\n        ];\n\n        const fetchedSops = await Promise.all(\n          filenames.map(async (file) => {\n            const response = await fetch(`http://localhost:5000/api/sop/${file}`);\n            const data = await response.json();\n            return {\n              title: decodeURIComponent(file.replace(\".pdf\", \"\")),\n              content: extractTextFromPdf2Json(data),\n              category: \"POS & Front End\"\n            };\n          })\n        );\n\n        setDynamicSops(fetchedSops);\n      } catch (err) {\n        console.error(\"Failed to fetch SOPs:\", err);\n      }\n    };\n\n    fetchSOPData();\n  }, []);\n\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages]);\n\n  const extractTextFromPdf2Json = (pdfData) => {\n    let text = \"\";\n    pdfData?.formImage?.Pages?.forEach(page => {\n      page.Texts?.forEach(item => {\n        const decoded = decodeURIComponent(item.R[0].T);\n        text += decoded + \" \";\n      });\n    });\n    return text.trim().split(/\\n{2,}/); // break into chunks\n  };\n\n  const createContext = () => {\n    let context = \"You are THE SOP AI, an expert assistant trained on the company's Standard Operating Procedures.\\n\\n\";\n    \n    dynamicSops.forEach(sop => {\n      context += `CATEGORY: ${sop.category}\\n`;\n      context += `TITLE: ${sop.title}\\n`;\n      context += `CONTENT:\\n${sop.content.join(\"\\n\")}\\n\\n`;\n    });\n\n    return context;\n  };\n\n  const sendToGemini = async (userQuestion) => {\n    try {\n      const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          contents: [{\n            parts: [{\n              text: createContext() + `Question: ${userQuestion}\\nDo NOT use markdown format! Respond like a profession robotic district manager. You will always reference the SOP documentation to backup your resluts. If you do not have the answer the user is asking for, DO NOT HALUCINATE. Instead admit you do not have the information requested. Only use plain text. Answer:`\n            }]\n          }]\n        })\n      });\n\n      const data = await response.json();\n\n      if (data.error) throw new Error(data.error.message || \"Error with Gemini API\");\n\n      return data.candidates[0].content.parts[0].text;\n    } catch (error) {\n      console.error('Error with Gemini API:', error);\n      return \"Sorry, I encountered an error while processing your request.\";\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (!input.trim()) return;\n\n    const userMessage = { text: input, sender: 'user' };\n    setMessages(prev => [...prev, userMessage]);\n    setInput('');\n    setIsLoading(true);\n\n    const aiResponse = await sendToGemini(input);\n    const aiMessage = { text: aiResponse, sender: 'ai' };\n    setMessages(prev => [...prev, aiMessage]);\n    setIsLoading(false);\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"chat-container\">\n        <header className=\"chat-header\">\n          <h1>THE SOP AI</h1>\n          <p>Your retail assistant for Standard Operating Procedures</p>\n        </header>\n\n        <div className=\"messages-area\">\n          {messages.map((message, index) => (\n            <div key={index} className={`message ${message.sender}`}>\n              {message.text}\n            </div>\n          ))}\n          {isLoading && (\n            <div className=\"message ai loading\">\n              <div className=\"typing-indicator\">\n                <span></span><span></span><span></span>\n              </div>\n            </div>\n          )}\n          <div ref={messagesEndRef} />\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"input-form\">\n          <input\n            type=\"text\"\n            value={input}\n            onChange={(e) => setInput(e.target.value)}\n            placeholder=\"Ask about store procedures...\"\n            disabled={isLoading}\n          />\n          <button type=\"submit\" disabled={isLoading || !input.trim()}>Send</button>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}