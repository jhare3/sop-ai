{"ast":null,"code":"var _jsxFileName = \"/Users/jameshare/codingProjects/sop-ai/sop-ai/frontend/src/App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [dynamicSops, setDynamicSops] = useState([]);\n  const messagesEndRef = useRef(null);\n  const apiKey = \"AIzaSyBPk4NYw_5enfX5-OJxYN14haaxFoQxiPM\"; // Replace with your actual key\n\n  useEffect(() => {\n    setMessages([{\n      text: \"Hello! I'm THE SOP AI. How can I help you today with store procedures?\",\n      sender: 'ai'\n    }]);\n    const fetchSOPData = async () => {\n      try {\n        const response = await fetch(\"http://localhost:5000/api/sop/merged_output.json\");\n        const data = await response.json();\n        const sopChunks = data.map(page => page.text).filter(Boolean);\n        setDynamicSops([{\n          title: \"Merged SOP Document\",\n          content: sopChunks,\n          category: \"General SOP\"\n        }]);\n      } catch (err) {\n        console.error(\"Failed to fetch SOPs:\", err);\n      }\n    };\n    fetchSOPData();\n  }, []);\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]);\n  const createContext = () => {\n    let context = \"You are THE SOP AI, an expert assistant trained on the company's Standard Operating Procedures.\\n\\n\";\n    dynamicSops.forEach(sop => {\n      context += `CATEGORY: ${sop.category}\\n`;\n      context += `TITLE: ${sop.title}\\n`;\n      context += `CONTENT:\\n${sop.content.join(\"\\n\")}\\n\\n`;\n    });\n    return context;\n  };\n  const sendToGemini = async userQuestion => {\n    try {\n      const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          contents: [{\n            parts: [{\n              text: createContext() + `Question: ${userQuestion}\\nDo NOT use markdown format! Respond like a professional robotic district manager. Make sure you read the sops.json file in depth before answering any question. Only use plain text. Answer:`\n            }]\n          }]\n        })\n      });\n      const data = await response.json();\n      if (data.error) throw new Error(data.error.message || \"Error with Gemini API\");\n      return data.candidates[0].content.parts[0].text;\n    } catch (error) {\n      console.error('Error with Gemini API:', error);\n      return \"Sorry, I encountered an error while processing your request.\";\n    }\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!input.trim()) return;\n    const userMessage = {\n      text: input,\n      sender: 'user'\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setInput('');\n    setIsLoading(true);\n    const aiResponse = await sendToGemini(input);\n    const aiMessage = {\n      text: aiResponse,\n      sender: 'ai'\n    };\n    setMessages(prev => [...prev, aiMessage]);\n    setIsLoading(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"chat-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"THE SOP AI\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Your retail assistant for Standard Operating Procedures\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages-area\",\n        children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${message.sender}`,\n          children: message.text\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this)), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message ai loading\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"typing-indicator\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 30\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 43\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        className: \"input-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: input,\n          onChange: e => setInput(e.target.value),\n          placeholder: \"Ask about store procedures...\",\n          disabled: isLoading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          disabled: isLoading || !input.trim(),\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"y9Gj5WehevqeUFHFENokON5R8NE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","App","_s","messages","setMessages","input","setInput","isLoading","setIsLoading","dynamicSops","setDynamicSops","messagesEndRef","apiKey","text","sender","fetchSOPData","response","fetch","data","json","sopChunks","map","page","filter","Boolean","title","content","category","err","console","error","_messagesEndRef$curre","current","scrollIntoView","behavior","createContext","context","forEach","sop","join","sendToGemini","userQuestion","method","headers","body","JSON","stringify","contents","parts","Error","message","candidates","handleSubmit","e","preventDefault","trim","userMessage","prev","aiResponse","aiMessage","className","children","fileName","_jsxFileName","lineNumber","columnNumber","index","ref","onSubmit","type","value","onChange","target","placeholder","disabled","_c","$RefreshReg$"],"sources":["/Users/jameshare/codingProjects/sop-ai/sop-ai/frontend/src/App.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [dynamicSops, setDynamicSops] = useState([]);\n  const messagesEndRef = useRef(null);\n\n  const apiKey = \"AIzaSyBPk4NYw_5enfX5-OJxYN14haaxFoQxiPM\"; // Replace with your actual key\n\n  useEffect(() => {\n    setMessages([{\n      text: \"Hello! I'm THE SOP AI. How can I help you today with store procedures?\",\n      sender: 'ai'\n    }]);\n\n    const fetchSOPData = async () => {\n      try {\n        const response = await fetch(\"http://localhost:5000/api/sop/merged_output.json\");\n        const data = await response.json();\n\n        const sopChunks = data.map(page => page.text).filter(Boolean);\n\n        setDynamicSops([{\n          title: \"Merged SOP Document\",\n          content: sopChunks,\n          category: \"General SOP\"\n        }]);\n      } catch (err) {\n        console.error(\"Failed to fetch SOPs:\", err);\n      }\n    };\n\n    fetchSOPData();\n  }, []);\n\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages]);\n\n  const createContext = () => {\n    let context = \"You are THE SOP AI, an expert assistant trained on the company's Standard Operating Procedures.\\n\\n\";\n\n    dynamicSops.forEach(sop => {\n      context += `CATEGORY: ${sop.category}\\n`;\n      context += `TITLE: ${sop.title}\\n`;\n      context += `CONTENT:\\n${sop.content.join(\"\\n\")}\\n\\n`;\n    });\n\n    return context;\n  };\n\n  const sendToGemini = async (userQuestion) => {\n    try {\n      const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          contents: [{\n            parts: [{\n              text: createContext() + `Question: ${userQuestion}\\nDo NOT use markdown format! Respond like a professional robotic district manager. Make sure you read the sops.json file in depth before answering any question. Only use plain text. Answer:`\n            }]\n          }]\n        })\n      });\n\n      const data = await response.json();\n\n      if (data.error) throw new Error(data.error.message || \"Error with Gemini API\");\n\n      return data.candidates[0].content.parts[0].text;\n    } catch (error) {\n      console.error('Error with Gemini API:', error);\n      return \"Sorry, I encountered an error while processing your request.\";\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (!input.trim()) return;\n\n    const userMessage = { text: input, sender: 'user' };\n    setMessages(prev => [...prev, userMessage]);\n    setInput('');\n    setIsLoading(true);\n\n    const aiResponse = await sendToGemini(input);\n    const aiMessage = { text: aiResponse, sender: 'ai' };\n    setMessages(prev => [...prev, aiMessage]);\n    setIsLoading(false);\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"chat-container\">\n        <header className=\"chat-header\">\n          <h1>THE SOP AI</h1>\n          <p>Your retail assistant for Standard Operating Procedures</p>\n        </header>\n\n        <div className=\"messages-area\">\n          {messages.map((message, index) => (\n            <div key={index} className={`message ${message.sender}`}>\n              {message.text}\n            </div>\n          ))}\n          {isLoading && (\n            <div className=\"message ai loading\">\n              <div className=\"typing-indicator\">\n                <span></span><span></span><span></span>\n              </div>\n            </div>\n          )}\n          <div ref={messagesEndRef} />\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"input-form\">\n          <input\n            type=\"text\"\n            value={input}\n            onChange={(e) => setInput(e.target.value)}\n            placeholder=\"Ask about store procedures...\"\n            disabled={isLoading}\n          />\n          <button type=\"submit\" disabled={isLoading || !input.trim()}>Send</button>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACW,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACa,WAAW,EAAEC,cAAc,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAMe,cAAc,GAAGb,MAAM,CAAC,IAAI,CAAC;EAEnC,MAAMc,MAAM,GAAG,yCAAyC,CAAC,CAAC;;EAE1Df,SAAS,CAAC,MAAM;IACdO,WAAW,CAAC,CAAC;MACXS,IAAI,EAAE,wEAAwE;MAC9EC,MAAM,EAAE;IACV,CAAC,CAAC,CAAC;IAEH,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC/B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,kDAAkD,CAAC;QAChF,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAElC,MAAMC,SAAS,GAAGF,IAAI,CAACG,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACT,IAAI,CAAC,CAACU,MAAM,CAACC,OAAO,CAAC;QAE7Dd,cAAc,CAAC,CAAC;UACde,KAAK,EAAE,qBAAqB;UAC5BC,OAAO,EAAEN,SAAS;UAClBO,QAAQ,EAAE;QACZ,CAAC,CAAC,CAAC;MACL,CAAC,CAAC,OAAOC,GAAG,EAAE;QACZC,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAEF,GAAG,CAAC;MAC7C;IACF,CAAC;IAEDb,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;EAENlB,SAAS,CAAC,MAAM;IAAA,IAAAkC,qBAAA;IACd,CAAAA,qBAAA,GAAApB,cAAc,CAACqB,OAAO,cAAAD,qBAAA,uBAAtBA,qBAAA,CAAwBE,cAAc,CAAC;MAAEC,QAAQ,EAAE;IAAS,CAAC,CAAC;EAChE,CAAC,EAAE,CAAC/B,QAAQ,CAAC,CAAC;EAEd,MAAMgC,aAAa,GAAGA,CAAA,KAAM;IAC1B,IAAIC,OAAO,GAAG,qGAAqG;IAEnH3B,WAAW,CAAC4B,OAAO,CAACC,GAAG,IAAI;MACzBF,OAAO,IAAI,aAAaE,GAAG,CAACX,QAAQ,IAAI;MACxCS,OAAO,IAAI,UAAUE,GAAG,CAACb,KAAK,IAAI;MAClCW,OAAO,IAAI,aAAaE,GAAG,CAACZ,OAAO,CAACa,IAAI,CAAC,IAAI,CAAC,MAAM;IACtD,CAAC,CAAC;IAEF,OAAOH,OAAO;EAChB,CAAC;EAED,MAAMI,YAAY,GAAG,MAAOC,YAAY,IAAK;IAC3C,IAAI;MACF,MAAMzB,QAAQ,GAAG,MAAMC,KAAK,CAAC,gGAAgGL,MAAM,EAAE,EAAE;QACrI8B,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBC,QAAQ,EAAE,CAAC;YACTC,KAAK,EAAE,CAAC;cACNnC,IAAI,EAAEsB,aAAa,CAAC,CAAC,GAAG,aAAaM,YAAY;YACnD,CAAC;UACH,CAAC;QACH,CAAC;MACH,CAAC,CAAC;MAEF,MAAMvB,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAElC,IAAID,IAAI,CAACY,KAAK,EAAE,MAAM,IAAImB,KAAK,CAAC/B,IAAI,CAACY,KAAK,CAACoB,OAAO,IAAI,uBAAuB,CAAC;MAE9E,OAAOhC,IAAI,CAACiC,UAAU,CAAC,CAAC,CAAC,CAACzB,OAAO,CAACsB,KAAK,CAAC,CAAC,CAAC,CAACnC,IAAI;IACjD,CAAC,CAAC,OAAOiB,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C,OAAO,8DAA8D;IACvE;EACF,CAAC;EAED,MAAMsB,YAAY,GAAG,MAAOC,CAAC,IAAK;IAChCA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB,IAAI,CAACjD,KAAK,CAACkD,IAAI,CAAC,CAAC,EAAE;IAEnB,MAAMC,WAAW,GAAG;MAAE3C,IAAI,EAAER,KAAK;MAAES,MAAM,EAAE;IAAO,CAAC;IACnDV,WAAW,CAACqD,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAED,WAAW,CAAC,CAAC;IAC3ClD,QAAQ,CAAC,EAAE,CAAC;IACZE,YAAY,CAAC,IAAI,CAAC;IAElB,MAAMkD,UAAU,GAAG,MAAMlB,YAAY,CAACnC,KAAK,CAAC;IAC5C,MAAMsD,SAAS,GAAG;MAAE9C,IAAI,EAAE6C,UAAU;MAAE5C,MAAM,EAAE;IAAK,CAAC;IACpDV,WAAW,CAACqD,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEE,SAAS,CAAC,CAAC;IACzCnD,YAAY,CAAC,KAAK,CAAC;EACrB,CAAC;EAED,oBACER,OAAA;IAAK4D,SAAS,EAAC,KAAK;IAAAC,QAAA,eAClB7D,OAAA;MAAK4D,SAAS,EAAC,gBAAgB;MAAAC,QAAA,gBAC7B7D,OAAA;QAAQ4D,SAAS,EAAC,aAAa;QAAAC,QAAA,gBAC7B7D,OAAA;UAAA6D,QAAA,EAAI;QAAU;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACnBjE,OAAA;UAAA6D,QAAA,EAAG;QAAuD;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxD,CAAC,eAETjE,OAAA;QAAK4D,SAAS,EAAC,eAAe;QAAAC,QAAA,GAC3B1D,QAAQ,CAACkB,GAAG,CAAC,CAAC6B,OAAO,EAAEgB,KAAK,kBAC3BlE,OAAA;UAAiB4D,SAAS,EAAE,WAAWV,OAAO,CAACpC,MAAM,EAAG;UAAA+C,QAAA,EACrDX,OAAO,CAACrC;QAAI,GADLqD,KAAK;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEV,CACN,CAAC,EACD1D,SAAS,iBACRP,OAAA;UAAK4D,SAAS,EAAC,oBAAoB;UAAAC,QAAA,eACjC7D,OAAA;YAAK4D,SAAS,EAAC,kBAAkB;YAAAC,QAAA,gBAC/B7D,OAAA;cAAA8D,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAY,CAAC,eAAAjE,OAAA;cAAA8D,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAY,CAAC,eAAAjE,OAAA;cAAA8D,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAY,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACpC;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CACN,eACDjE,OAAA;UAAKmE,GAAG,EAAExD;QAAe;UAAAmD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzB,CAAC,eAENjE,OAAA;QAAMoE,QAAQ,EAAEhB,YAAa;QAACQ,SAAS,EAAC,YAAY;QAAAC,QAAA,gBAClD7D,OAAA;UACEqE,IAAI,EAAC,MAAM;UACXC,KAAK,EAAEjE,KAAM;UACbkE,QAAQ,EAAGlB,CAAC,IAAK/C,QAAQ,CAAC+C,CAAC,CAACmB,MAAM,CAACF,KAAK,CAAE;UAC1CG,WAAW,EAAC,+BAA+B;UAC3CC,QAAQ,EAAEnE;QAAU;UAAAuD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACrB,CAAC,eACFjE,OAAA;UAAQqE,IAAI,EAAC,QAAQ;UAACK,QAAQ,EAAEnE,SAAS,IAAI,CAACF,KAAK,CAACkD,IAAI,CAAC,CAAE;UAAAM,QAAA,EAAC;QAAI;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAAC/D,EAAA,CAhIQD,GAAG;AAAA0E,EAAA,GAAH1E,GAAG;AAkIZ,eAAeA,GAAG;AAAC,IAAA0E,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}