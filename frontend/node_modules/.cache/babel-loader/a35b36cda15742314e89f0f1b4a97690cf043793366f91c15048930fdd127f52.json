{"ast":null,"code":"var _jsxFileName = \"/Users/jameshare/codingProjects/sop-ai/sop-ai/src/App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\nimport sopData from './sops.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const apiKey = \"AIzaSyBPk4NYw_5enfX5-OJxYN14haaxFoQxiPM\"; // <-- put your real API key here\n  const messagesEndRef = useRef(null);\n\n  // Initialize with welcome message\n  useEffect(() => {\n    setMessages([{\n      text: \"Hello! I'm THE SOP AI. How can I help you today with store procedures?\",\n      sender: 'ai'\n    }]);\n  }, []);\n\n  // Scroll to bottom when messages update\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]);\n\n  // Generate context from SOP data\n  const createContext = () => {\n    let context = \"You are THE SOP AI, an expert assistant trained on the company's Standard Operating Procedures. \";\n    context += \"When answering questions, base your responses on the following SOP information:\\n\\n\";\n    sopData.forEach(sop => {\n      context += `CATEGORY: ${sop.category}\\n`;\n      context += `TITLE: ${sop.title}\\n`;\n      context += `CONTENT: ${sop.content}\\n\\n`;\n    });\n    return context;\n  };\n\n  // Send message to Gemini API\n  const sendToGemini = async userQuestion => {\n    try {\n      const response = await fetch(\"https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=\" + apiKey, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          contents: [{\n            parts: [{\n              text: createContext() + `Question: ${userQuestion}\\nAnswer:`\n            }]\n          }]\n        })\n      });\n      const data = await response.json();\n      if (data.error) {\n        throw new Error(data.error.message || \"Error with Gemini API\");\n      }\n      return data.candidates[0].content.parts[0].text;\n    } catch (error) {\n      console.error('Error with Gemini API:', error);\n      return \"Sorry, I encountered an error while processing your request. Please try again later.\";\n    }\n  };\n\n  // Handle form submission\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!input.trim()) return;\n\n    // Add user message\n    const userMessage = {\n      text: input,\n      sender: 'user'\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setInput('');\n    setIsLoading(true);\n\n    // Get AI response\n    const aiResponse = await sendToGemini(input);\n    const aiMessage = {\n      text: aiResponse,\n      sender: 'ai'\n    };\n    setMessages(prev => [...prev, aiMessage]);\n    setIsLoading(false);\n  };\n\n  // Main chat interface\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"chat-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"THE SOP AI\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Your retail assistant for Standard Operating Procedures\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages-area\",\n        children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${message.sender}`,\n          children: message.text\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }, this)), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message ai loading\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"typing-indicator\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        className: \"input-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: input,\n          onChange: e => setInput(e.target.value),\n          placeholder: \"Ask about store procedures...\",\n          disabled: isLoading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          disabled: isLoading || !input.trim(),\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"UCxWPYHyCNzrbO5Y7ohHD7Lz13g=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","sopData","jsxDEV","_jsxDEV","App","_s","messages","setMessages","input","setInput","isLoading","setIsLoading","apiKey","messagesEndRef","text","sender","_messagesEndRef$curre","current","scrollIntoView","behavior","createContext","context","forEach","sop","category","title","content","sendToGemini","userQuestion","response","fetch","method","headers","body","JSON","stringify","contents","parts","data","json","error","Error","message","candidates","console","handleSubmit","e","preventDefault","trim","userMessage","prev","aiResponse","aiMessage","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","ref","onSubmit","type","value","onChange","target","placeholder","disabled","_c","$RefreshReg$"],"sources":["/Users/jameshare/codingProjects/sop-ai/sop-ai/src/App.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\nimport sopData from './sops.json';\n\nfunction App() {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const apiKey = \"AIzaSyBPk4NYw_5enfX5-OJxYN14haaxFoQxiPM\"; // <-- put your real API key here\n  const messagesEndRef = useRef(null);\n\n  // Initialize with welcome message\n  useEffect(() => {\n    setMessages([{\n      text: \"Hello! I'm THE SOP AI. How can I help you today with store procedures?\",\n      sender: 'ai'\n    }]);\n  }, []);\n\n  // Scroll to bottom when messages update\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages]);\n\n  // Generate context from SOP data\n  const createContext = () => {\n    let context = \"You are THE SOP AI, an expert assistant trained on the company's Standard Operating Procedures. \";\n    context += \"When answering questions, base your responses on the following SOP information:\\n\\n\";\n\n    sopData.forEach(sop => {\n      context += `CATEGORY: ${sop.category}\\n`;\n      context += `TITLE: ${sop.title}\\n`;\n      context += `CONTENT: ${sop.content}\\n\\n`;\n    });\n\n    return context;\n  };\n\n  // Send message to Gemini API\n  const sendToGemini = async (userQuestion) => {\n    try {\n      const response = await fetch(\"https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=\" + apiKey, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          contents: [\n            {\n              parts: [\n                {\n                  text: createContext() + `Question: ${userQuestion}\\nAnswer:`\n                }\n              ]\n            }\n          ]\n        })\n      });\n\n      const data = await response.json();\n\n      if (data.error) {\n        throw new Error(data.error.message || \"Error with Gemini API\");\n      }\n\n      return data.candidates[0].content.parts[0].text;\n    } catch (error) {\n      console.error('Error with Gemini API:', error);\n      return \"Sorry, I encountered an error while processing your request. Please try again later.\";\n    }\n  };\n\n  // Handle form submission\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (!input.trim()) return;\n\n    // Add user message\n    const userMessage = { text: input, sender: 'user' };\n    setMessages(prev => [...prev, userMessage]);\n    setInput('');\n    setIsLoading(true);\n\n    // Get AI response\n    const aiResponse = await sendToGemini(input);\n    const aiMessage = { text: aiResponse, sender: 'ai' };\n    setMessages(prev => [...prev, aiMessage]);\n    setIsLoading(false);\n  };\n\n  // Main chat interface\n  return (\n    <div className=\"app\">\n      <div className=\"chat-container\">\n        <header className=\"chat-header\">\n          <h1>THE SOP AI</h1>\n          <p>Your retail assistant for Standard Operating Procedures</p>\n        </header>\n\n        <div className=\"messages-area\">\n          {messages.map((message, index) => (\n            <div key={index} className={`message ${message.sender}`}>\n              {message.text}\n            </div>\n          ))}\n          {isLoading && (\n            <div className=\"message ai loading\">\n              <div className=\"typing-indicator\">\n                <span></span>\n                <span></span>\n                <span></span>\n              </div>\n            </div>\n          )}\n          <div ref={messagesEndRef} />\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"input-form\">\n          <input\n            type=\"text\"\n            value={input}\n            onChange={(e) => setInput(e.target.value)}\n            placeholder=\"Ask about store procedures...\"\n            disabled={isLoading}\n          />\n          <button type=\"submit\" disabled={isLoading || !input.trim()}>\n            Send\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}